// Copyright (c) 2011-2016 The Cryptonote developers
// Copyright (c) 2018-2020 The Cash2 developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <string>

#include "gtest/gtest.h"

#include "crypto/chacha8.h"

namespace
{
  struct test_data {
    const uint8_t* key;
    const uint8_t* iv;
    const size_t text_length;
    const uint8_t* plain_text;
    const uint8_t* cipher_text;
  };

    // test_0

    static const uint8_t test_key_0[32] =
    {
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00
    };
    
    static const uint8_t test_iv_0[8] =
    {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    static const uint8_t test_plain_text_0[64] =
    {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00
    };

    static const uint8_t test_cipher_text_0[64] =
    {
      0x65, 0x3f, 0x4a, 0x18, 0xe3, 0xd2, 0x7d, 0xaf, 0x51, 0xf8,
      0x41, 0xa0, 0x0b, 0x6c, 0x1a, 0x2b, 0xd2, 0x48, 0x98, 0x52,
      0xd4, 0xae, 0x07, 0x11, 0xe1, 0xa4, 0xa3, 0x2a, 0xd1, 0x66,
      0xfa, 0x6f, 0x88, 0x1a, 0x28, 0x43, 0x23, 0x8c, 0x7e, 0x17,
      0x78, 0x6b, 0xa5, 0x16, 0x2b, 0xc0, 0x19, 0xd5, 0x73, 0x84,
      0x9c, 0x16, 0x76, 0x68, 0x51, 0x0a, 0xda, 0x2f, 0x62, 0xb4,
      0xff, 0x31, 0xad, 0x04
    };

    static const test_data test_0 =
    {
      test_key_0,
      test_iv_0,
      sizeof(test_plain_text_0),
      test_plain_text_0,
      test_cipher_text_0
    };

    // test_1

    static const uint8_t test_key_1[32] =
    {
      0x0f, 0x62, 0xb5, 0x08, 0x5b, 0xae, 0x01, 0x54, 0xa7, 0xfa,
      0x4d, 0xa0, 0xf3, 0x46, 0x99, 0xec, 0x3f, 0x92, 0xe5, 0x38,
      0x8b, 0xde, 0x31, 0x84, 0xd7, 0x2a, 0x7d, 0xd0, 0x23, 0x76,
      0xc9, 0x1c
    };
    
    static const uint8_t test_iv_1[8] =
    {
      0x28, 0x8f, 0xf6, 0x5d, 0xc4, 0x2b, 0x92, 0xf9
    };

    static const uint8_t test_plain_text_1[64] =
    {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00
    };

    static const uint8_t test_cipher_text_1[64] =
    {
      0xdb, 0x16, 0x58, 0x14, 0xf6, 0x67, 0x33, 0xb7, 0xa8, 0xe3,
      0x4d, 0x1f, 0xfc, 0x12, 0x34, 0x27, 0x12, 0x56, 0xd3, 0xbf,
      0x8d, 0x8d, 0xa2, 0x16, 0x69, 0x22, 0xe5, 0x98, 0xac, 0xac,
      0x70, 0xf4, 0x12, 0xb3, 0xfe, 0x35, 0xa9, 0x41, 0x90, 0xad,
      0x0a, 0xe2, 0xe8, 0xec, 0x62, 0x13, 0x48, 0x19, 0xab, 0x61,
      0xad, 0xdc, 0xcc, 0xfe, 0x99, 0xd8, 0x67, 0xca, 0x3d, 0x73,
      0x18, 0x3f, 0xa3, 0xfd
    };

    static const test_data test_1 =
    {
      test_key_1,
      test_iv_1,
      sizeof(test_plain_text_1),
      test_plain_text_1,
      test_cipher_text_1
    };

    // test_2

    static const uint8_t test_key_2[32] =
    {
      0x0f, 0x62, 0xb5, 0x08, 0x5b, 0xae, 0x01, 0x54, 0xa7, 0xfa,
      0x4d, 0xa0, 0xf3, 0x46, 0x99, 0xec, 0x3f, 0x92, 0xe5, 0x38,
      0x8b, 0xde, 0x31, 0x84, 0xd7, 0x2a, 0x7d, 0xd0, 0x23, 0x76,
      0xc9, 0x1c
    };
    
    static const uint8_t test_iv_2[8] =
    {
      0x28, 0x8f, 0xf6, 0x5d, 0xc4, 0x2b, 0x92, 0xf9
    };

    static const uint8_t test_plain_text_2[67] =
    {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    static const uint8_t test_cipher_text_2[67] =
    {
      0xdb, 0x16, 0x58, 0x14, 0xf6, 0x67, 0x33, 0xb7, 0xa8, 0xe3,
      0x4d, 0x1f, 0xfc, 0x12, 0x34, 0x27, 0x12, 0x56, 0xd3, 0xbf,
      0x8d, 0x8d, 0xa2, 0x16, 0x69, 0x22, 0xe5, 0x98, 0xac, 0xac,
      0x70, 0xf4, 0x12, 0xb3, 0xfe, 0x35, 0xa9, 0x41, 0x90, 0xad,
      0x0a, 0xe2, 0xe8, 0xec, 0x62, 0x13, 0x48, 0x19, 0xab, 0x61,
      0xad, 0xdc, 0xcc, 0xfe, 0x99, 0xd8, 0x67, 0xca, 0x3d, 0x73,
      0x18, 0x3f, 0xa3, 0xfd, 0x82, 0x87, 0x0F
    };

    static const test_data test_2 =
    {
      test_key_2,
      test_iv_2,
      sizeof(test_plain_text_2),
      test_plain_text_2,
      test_cipher_text_2
    };

    // test_3

    static const uint8_t test_key_3[32] =
    {
      0x0f, 0x62, 0xb5, 0x08, 0x5b, 0xae, 0x01, 0x54, 0xa7, 0xfa,
      0x4d, 0xa0, 0xf3, 0x46, 0x99, 0xec, 0x3f, 0x92, 0xe5, 0x38,
      0x8b, 0xde, 0x31, 0x84, 0xd7, 0x2a, 0x7d, 0xd0, 0x23, 0x76,
      0xc9, 0x1c
    };
    
    static const uint8_t test_iv_3[8] =
    {
      0x28, 0x8f, 0xf6, 0x5d, 0xc4, 0x2b, 0x92, 0xf9
    };

    static const uint8_t test_plain_text_3[1] =
    {
      0x00
    };

    static const uint8_t test_cipher_text_3[1] =
    {
      0xdb
    };

    static const test_data test_3 =
    {
      test_key_3,
      test_iv_3,
      sizeof(test_plain_text_3),
      test_plain_text_3,
      test_cipher_text_3
    };

  void run_test(const test_data* test)
  {
    std::string buf;
    buf.resize(test->text_length);

    Crypto::chacha8(test->plain_text, test->text_length, test->key, test->iv, &buf[0]);
    ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(test->cipher_text), test->text_length));

    Crypto::chacha8(test->cipher_text, test->text_length, test->key, test->iv, &buf[0]);
    ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(test->plain_text), test->text_length));
  }
}

TEST(chacha8, is_correct_0)
{
  run_test(&test_0);
}

TEST(chacha8, is_correct_1)
{
  run_test(&test_1);
}

TEST(chacha8, is_correct_2)
{
  run_test(&test_2);
}

TEST(chacha8, is_correct_3)
{
  run_test(&test_3);
}




























